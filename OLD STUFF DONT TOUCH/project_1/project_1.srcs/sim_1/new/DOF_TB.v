`timescale 1ns / 1ps

module DOF_TB();
    reg [31:0] IR,PC_n1;
    wire [31:0] A,B;
    reg clk,reset;
    wire [1:0] MD,BS;
    wire [4:0] AA,BA,DA,FS,SH;
    wire [31:0] BUS_A, BUS_B,PC_n2;
    wire RW,PS,MW;
    reg [31:0] D;
    
    DOF uut(
    .IR(IR),
    .PC_n1(PC_n1),
    .A(A),
    .B(B),
    .clk(clk),
    .reset(reset),
    .MD(MD),
    .BS(BS),
    .AA(AA),
    .BA(BA),
    .DA(DA),
    .FS(FS),
    .SH(SH),
    .BUS_A(BUS_A),
    .BUS_B(BUS_B),
    .PC_n2(PC_n2),
    .RW(RW),
    .PS(PS),
    .MW(MW)
    );
    Register_File RF(
        .AA(AA),
        .BA(BA),
        .DA(DA),
        .clk(clk),
        .RW(RW),
        .D(D),
        .A(A),
        .B(B)
    );
    initial begin
        reset = 0;
        clk = 0;
        PC_n1 = 32'b111;
        #2;
        PC_n1 = 32'b101;
        //tests the PC_n2 connection to PC_n1 
        IR = 32'b0000010_00101_00001_00010_0000000000; //ADD
        #10;
        IR = 32'b0000101_00110_00011_00100_0000000000; //SUB
        #10;
        IR = 32'b1100101_00111_00000_00000_0000000000; //SLT
        #10;
        IR = 32'b0001000_00000_00000_00000_0000000000; //AND
        #10;
        IR = 32'b0001010_00000_00000_00000_0000000000; // OR
        #10;
        IR = 32'b0001100_00000_00000_00000_0000000000; //XOR
        #10;
        IR = 32'b0000001_00000_00000_00000_0000000000; //ST
        #10;
        IR = 32'b0100001_00000_00000_00000_0000000000; //LD
        #10;
        IR = 32'b0100010_00000_00000_00000_0000000000; //ADI
        #10; 
        IR = 32'b0100101_00000_00000_00000_0000000000; //SBI
        #10;
        IR = 32'b0101110_00000_00000_00000_0000000000; //Not
        #10;
        IR = 32'b0101000_00000_00000_00000_0000000000; //ANI
        #10;
        IR = 32'b0101010_00000_00000_00000_0000000000; //ORI
        #10;
        IR = 32'b0101100_00000_00000_00000_0000000000; //XRI
        #10;
        IR = 32'b1100010_00000_00000_00000_0000000000; //AIU
        #10; 
        IR = 32'b1000101_00000_00000_00000_0000000000; //SIU
        #10;
        IR = 32'b1000000_00000_00000_00000_0000000000; //MOV
        #10;
        IR = 32'b0110000_00000_00000_00000_0000000000; //LSL
        #10;
        IR = 32'b0110001_00000_00000_00000_0000000000; //LSR
        #10;
        IR = 32'b1100001_00000_00000_00000_0000000000; //JMR
        #10;
        IR = 32'b0100000_00000_00000_00000_0000000000; //BZ
        #10;
        IR = 32'b1100000_00000_00000_00000_0000000000; //BNZ
        #10;
        IR = 32'b1000100_00000_00000_00000_0000000000; //JMP
        #10;
        IR = 32'b0000111_00000_00000_00000_0000000000; //JML
        // Tests the IR Decoder.
    end
    
    always #5 clk = ~clk;
endmodule
