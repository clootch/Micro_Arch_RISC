`timescale 1ns / 1ps

module Instruction_Memory(
    input clk,
    input [31:0] PC,
    output reg [31:0] IR
    );
    
    //Program Memory:
    initial IR = 0;
    
    always@ (posedge clk) begin
        case (PC)
            //           Opcode  DR    SA   SB/Imme/offset
             0: IR = 32'b0000000_00000_00000_00000_0000000000; //Nop
             2: IR = 32'b0000010_00101_00001_00010_0000000000; //Add 4 + (-1) = 3
             5: IR = 32'b0000101_00110_00011_00100_0000000000; //Sub 1001 - (-4350) =
             8: IR = 32'b1100101_00111_00000_00000_0000000000; //SLT
            11: IR = 32'b0001000_00000_00000_00000_0000000000; //AND
            14: IR = 32'b0001010_00000_00000_00000_0000000000; //OR
            17: IR = 32'b0001100_00000_00000_00000_0000000000; //XOR
            20: IR = 32'b0000001_00000_00000_00000_0000000000; //ST
            23: IR = 32'b0100001_00000_00000_00000_0000000000; //LD
            26: IR = 32'b0100010_00000_00000_00000_0000000000; //ADI
            29: IR = 32'b0100101_00000_00000_00000_0000000000; //SBI
            32: IR = 32'b0101110_00000_00000_00000_0000000000; //Not
            35: IR = 32'b0101000_00000_00000_00000_0000000000; //ANI
            38: IR = 32'b0101010_00000_00000_00000_0000000000; //ORI
            41: IR = 32'b0101100_00000_00000_00000_0000000000; //XRI
            44: IR = 32'b1100010_00000_00000_00000_0000000000; //AIU
            47: IR = 32'b1000101_00000_00000_00000_0000000000; //SIU
            50: IR = 32'b1000000_00000_00000_00000_0000000000; //MOV
            53: IR = 32'b0110000_00000_00000_00000_0000000000; //LSL
            56: IR = 32'b0110001_00000_00000_00000_0000000000; //LSR
            59: IR = 32'b1100001_00000_00000_00000_0000000000; //JMR
            62: IR = 32'b0100000_00000_00000_00000_0000000000; //BZ
            65: IR = 32'b1100000_00000_00000_00000_0000000000; //BNZ
            68: IR = 32'b1000100_00000_00000_00000_0000000000; //JMP
            71: IR = 32'b0000111_00000_00000_00000_0000000000; //JML
       default: IR = 32'b0; //NOP
        endcase
    end
    
    
    
endmodule
